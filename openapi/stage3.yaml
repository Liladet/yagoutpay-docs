openapi: 3.0.3
info:
  title: YagoutPay Payment Links API
  description: |
    # YagoutPay Payment Links API Documentation

    Welcome to the YagoutPay Payment Links API! This service allows merchants to generate secure payment links and QR codes that can be shared with customers.

    ## üöÄ Quick Overview

    - **For Merchants**: Create shareable payment links without coding
    - **For Developers**: Simple API integration with encrypted security
    - **Single Step**: Encrypt your data once, send to our API, get payment link
    - **Instant Results**: Receive payment links immediately in JSON format

    ## How It Works

    1. **Prepare** your payment information (amount, customer details, etc.)
    2. **Encrypt** the data using your merchant encryption key
    3. **Send** the encrypted data to our API endpoint
    4. **Receive** a secure payment link ready to share with customers

servers:
  - url: https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0
    description: |
      üîß **Testing Environment** - Use this for development and testing

paths:
  /sdk/paymentByLinkResponse:
    post:
      summary: üì± Create Dynamic Payment Link
      description: |
        # Create a Dynamic Payment Link

        Generate a unique, one-time payment link that can be shared with customers via SMS, email, or messaging apps.

        ## üéØ Perfect For:
        - **Invoice payments**
        - **One-time purchases**
        - **Service payments**
        - **Donations**

        ## ‚ö° Quick Example
        ```json
        {
          "request": "your_encrypted_payment_data_here"
        }
        ```

        ## üìã What You'll Need
        - Your Merchant ID (`me_id`)
        - Your Encryption Key (from merchant dashboard)
        - Customer payment details

        The response will contain a secure payment URL that your customer can use to complete their payment.
      operationId: createDynamicLink
      tags:
        - Dynamic Payments
      parameters:
        - name: me_id
          in: header
          required: true
          schema:
            type: string
            example: "202508080001"
          description: |
            üîë **Your Merchant ID**

            This identifies your business in our system. You can find this in your YagoutPay merchant dashboard under Account Settings.
      requestBody:
        required: true
        description: |
          ## üîí Encrypted Payment Data

          Your payment information must be encrypted for security before sending to our API.

          ### üìù Before Encryption (Example):
          ```json
          {

          "req_user_id": "yagou381",
          "me_id": "202508080001",
          "amount": "500",
          "customer_email": "",
          "mobile_no": "0965680964",
          "expiry_date": "2025-12-31",
          "media_type": ["API"],
          "order_id": "ORDER_STATIC_001",
          "first_name": "YagoutPay",
          "last_name": "StaticLink",
          "product": "Premium Subscription",
          "dial_code": "+251",
          "failure_url": "http://localhost:3000/failure",
          "success_url": "http://localhost:3000/success",
          "country": "ETH",
          "currency": "ETB"

          }
          ```

          ### üîê After Encryption (What you send):
          ```json
          {
            "request": "CXAemespskAQCvLNox2fF3HiAXKEwk4BskvpTlYu5/5M1rdzFcY+LOMSMbHtWqAr..."
          }
          ```
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EncryptedPayload"
            examples:
              workingExample:
                summary: ‚úÖ Sample Encrypted Payload
                description: This is what a successfully encrypted payload looks like
                value:
                  request: "CXAemespskAQCvLNox2fF3HiAXKEwk4BskvpTlYu5/5M1rdzFcY+LOMSMbHtWqArIjTafka98tiyQ0iOsuSiM6LTbC/rtiFfnkoxdFhAzho5A2zqo/RYkJ1/cJ0GFDkDankHs5bXu2wF6VBMyV/H/55gsOZNbcagAGQnp785v8S2TgX4mIYoHrvii/601CyQdVqCZJUmBlUxrz6MlgRUkkxRXi/a3Sw86pSfAnoPxtwNe+OLi5Iyeu+bGylzXP+ne0B/DXwIqegvyJhh9EepkVclLeNCx9ODL+G9GKiMavaqYzSnUbkeWqJRXfQPOURfsrPZ5stUNqCn3b0MWRvLsZU3yStXAx/Dc99uLYcgylo="
      responses:
        "200":
          description: |
            ‚úÖ **Success! Payment Link Created**

            Your payment link has been generated successfully and is ready to share with your customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLinkResponse"
              examples:
                successResponse:
                  summary: üéâ Payment Link Generated
                  description: This is what you'll receive when a payment link is successfully created
                  value:
                    status: "success"
                    link: "https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0/paymentRedirection/payment/wn0MMOXU"
        "400":
          description: |
            ‚ùå **Request Error**

            There was an issue with your request. Common causes:
            - Invalid JSON format
            - Missing required fields
            - Encryption key mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                errorExample:
                  summary: Example Error Response
                  value:
                    status: "error"
                    message: "Invalid encrypted payload - please check your encryption key"

  /sdk/staticQRPaymentResponse:
    post:
      summary: üìä Create Static QR Code Payment
      description: |
        # Create a Static QR Code

        Generate a reusable QR code for fixed-amount payments. Perfect for printed materials, store displays, or recurring payments.

        ## üè™ Perfect For:
        - **Store counter payments**
        - **Event tickets**
        - **Membership fees**
        - **Fixed-price products**

        ## üîÑ Key Differences from Dynamic Links:
        - **Reusable**: Same QR code can be used multiple times
        - **Fixed Amount**: Amount doesn't change between uses
        - **Print Friendly**: Great for physical displays
