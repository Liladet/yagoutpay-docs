openapi: 3.0.3
info:
  title: YagoutPay Payment Links API
  description: |
    # YagoutPay Payment Links API Documentation

    Welcome to the YagoutPay Payment Links API! This service allows merchants to generate secure payment links and QR codes that can be shared with customers.

    ## üöÄ Quick Overview

    - **For Merchants**: Create shareable payment links and QR codes without coding
    - **For Developers**: Simple API integration with encrypted security
    - **Single Step**: Encrypt your data once, send to our API, get payment link or QR code details
    - **Instant Results**: Receive payment links and QR code details immediately in JSON format

    ## How It Works

    1. **Prepare** your payment information (amount, customer details, etc.)
    2. **Encrypt** the data using your merchant encryption key (AES-256-CBC with PKCS7 padding)
    3. **Send** the encrypted data to our API endpoint
    4. **Receive** an encrypted response containing a secure payment URL and QR code details
    5. **Decrypt** the response to extract the payment link and QR ID
    6. **Generate** a QR code image locally (if needed) using the payment link or QR ID

servers:
  - url: https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0
    description: |
      üîß **Testing Environment** - Use this for development and testing

paths:
  /sdk/paymentByLinkResponse:
    post:
      summary: üì± Create Dynamic Payment Link
      description: |
        # Create a Dynamic Payment Link

        Generate a unique, one-time payment link that can be shared with customers via SMS, email, or messaging apps.

        ## üéØ Perfect For:
        - **Invoice payments**
        - **One-time purchases**
        - **Service payments**
        - **Donations**

        ## ‚ö° Quick Example
        ```json
        {
          "request": "your_encrypted_payment_data_here"
        }
        ```

        ## üìã What You'll Need
        - Your Merchant ID (`me_id`)
        - Your Encryption Key (from merchant dashboard)
        - Customer payment details

        The response will contain a secure payment URL that your customer can use to complete their payment.
      operationId: createDynamicLink
      tags:
        - Dynamic Payments
      parameters:
        - name: me_id
          in: header
          required: true
          schema:
            type: string
            example: "202508080001"
          description: |
            üîë **Your Merchant ID**

            This identifies your business in our system. You can find this in your YagoutPay merchant dashboard under Account Settings.
      requestBody:
        required: true
        description: |
          ## üîí Encrypted Payment Data

          Your payment information must be encrypted for security before sending to our API.

          ### üìù Before Encryption (Example):
          ```json
          {
            "req_user_id": "yagou381",
            "me_id": "202508080001",
            "amount": "500",
            "customer_email": "",
            "mobile_no": "0965680964",
            "expiry_date": "2025-12-31",
            "media_type": ["API"],
            "order_id": "ORDER_STATIC_001",
            "first_name": "YagoutPay",
            "last_name": "StaticLink",
            "product": "Premium Subscription",
            "dial_code": "+251",
            "failure_url": "http://localhost:3000/failure",
            "success_url": "http://localhost:3000/success",
            "country": "ETH",
            "currency": "ETB"
          }
          ```

          ### üîê After Encryption (What you send):
          ```json
          {
            "request": "CXAemespskAQCvLNox2fF3HiAXKEwk4BskvpTlYu5/5M1rdzFcY+LOMSMbHtWqAr..."
          }
          ```
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EncryptedPayload"
            examples:
              workingExample:
                summary: ‚úÖ Sample Encrypted Payload
                description: This is what a successfully encrypted payload looks like
                value:
                  request: "CXAemespskAQCvLNox2fF3HiAXKEwk4BskvpTlYu5/5M1rdzFcY+LOMSMbHtWqArIjTafka98tiyQ0iOsuSiM6LTbC/rtiFfnkoxdFhAzho5A2zqo/RYkJ1/cJ0GFDkDankHs5bXu2wF6VBMyV/H/55gsOZNbcagAGQnp785v8S2TgX4mIYoHrvii/601CyQdVqCZJUmBlUxrz6MlgRUkkxRXi/a3Sw86pSfAnoPxtwNe+OLi5Iyeu+bGylzXP+ne0B/DXwIqegvyJhh9EepkVclLeNCx9ODL+G9GKiMavaqYzSnUbkeWqJRXfQPOURfsrPZ5stUNqCn3b0MWRvLsZU3yStXAx/Dc99uLYcgylo="
      responses:
        "200":
          description: |
            ‚úÖ **Success! Payment Link Created**

            Your payment link has been generated successfully and is ready to share with your customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLinkResponse"
              examples:
                successResponse:
                  summary: üéâ Payment Link Generated
                  description: This is what you'll receive when a payment link is successfully created
                  value:
                    status: "success"
                    link: "https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0/paymentRedirection/payment/wn0MMOXU"
        "400":
          description: |
            ‚ùå **Request Error**

            There was an issue with your request. Common causes:
            - Invalid JSON format
            - Missing required fields
            - Encryption key mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                errorExample:
                  summary: Example Error Response
                  value:
                    status: "error"
                    message: "Invalid encrypted payload - please check your encryption key"

  /sdk/staticQRPaymentResponse:
    post:
      summary: üìä Create Static QR Code Payment
      description: |
        # Create a Static QR Code Payment Link

        Generate a reusable payment link and QR code details for fixed-amount payments. The API returns a URL and QR ID, which can be used to create a QR code image locally for sharing with customers via SMS, email, or physical displays.

        ## üè™ Perfect For:
        - **Store counter payments**
        - **Event tickets**
        - **Membership fees**
        - **Fixed-price products**

        ## üîÑ Key Differences from Dynamic Links:
        - **Reusable**: Same QR code can be used multiple times
        - **Fixed Amount**: Amount doesn't change between uses
        - **Print Friendly**: Great for physical displays

        ## ‚ö° Quick Example
        ```json
        {
          "request": "your_encrypted_payment_data_here"
        }
        ```

        ## üìã What You'll Need
        - Your Merchant ID (`me_id`)
        - Your Encryption Key (from merchant dashboard)
        - Payment details (amount, brand name, etc.)
        - A QR code generation library (e.g., Python `qrcode`) for creating the QR code image locally

        ## üîÑ Process
        1. Prepare and encrypt the payment data.
        2. Send the encrypted data to this endpoint.
        3. Decrypt the response to get the payment link (`staticLink`) and QR ID (`qrId`).
        4. Generate a QR code image locally encoding the `staticLink` for customer use.

      operationId: createStaticQRLink
      tags:
        - Static QR Payments

      parameters:
        - name: me_id
          in: header
          required: true
          schema:
            type: string
            example: "202508080001"
          description: |
            üîë **Your Merchant ID**

            This identifies your business in our system. You can find this in your YagoutPay merchant dashboard under Account Settings.
      requestBody:
        required: true
        description: |
          ## üîí Encrypted Payment Data

          Your payment information must be encrypted using AES-256-CBC with PKCS7 padding before sending to our API.

          ### üìù Before Encryption (Example):
          ```json
          {
            "ag_id": "",
            "ag_code": "",
            "ag_name": "",
            "req_user_id": "yagou381",
            "me_code": "202508080001",
            "me_name": "",
            "qr_code_id": "",
            "brandName": "Ahmed",
            "qr_name": "",
            "status": "ACTIVE",
            "storeName": "YP",
            "store_id": "",
            "token": "",
            "qr_transaction_amount": "1",
            "logo": "",
            "store_email": "",
            "mobile_no": "",
            "udf": "",
            "udfmerchant": "",
            "file_name": "",
            "from_date": "",
            "to_date": "",
            "file_extn": "",
            "file_url": "",
            "file": "",
            "original_file_name": "",
            "successURL": "",
            "failureURL": "",
            "addAll": "",
            "source": ""
          }
          ```

          ### üîê After Encryption (What you send):
          ```json
          {
            "request": "Voxkpq/vhHH2jaOodhI2CVMQh0sZ2u43qssjILVM6HX+DDUeGz/IleNiVBFyf9DjE1ASXI22niMQoCdG3Zv6FN6z..."
          }
          ```

          ### üîç Notes
          - Use your merchant encryption key for AES-256-CBC encryption with a fixed IV (`0123456789abcdef`).
          - Required fields: `req_user_id`, `me_code`, `qr_transaction_amount`, `status`.
          - Other fields are optional but may be required for specific use cases (check with YagoutPay).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EncryptedPayload"
            examples:
              workingExample:
                summary: ‚úÖ Sample Encrypted Payload
                description: This is what a successfully encrypted payload looks like
                value:
                  request: "Voxkpq/vhHH2jaOodhI2CVMQh0sZ2u43qssjILVM6HX+DDUeGz/IleNiVBFyf9DjE1ASXI22niMQoCdG3Zv6FN6z..."
      responses:
        "200":
          description: |
            ‚úÖ **Success! Static Payment Link and QR ID Created**

            The API returns an encrypted response containing a reusable payment link and QR ID. Decrypt the `responseData` field to access the details.

            ### üîç Post-Processing
            - Decrypt the `responseData` using the same encryption key and method.
            - Extract the `staticLink` and `qrId` from the decrypted JSON.
            - Generate a QR code image locally (e.g., using Python `qrcode` library) encoding the `staticLink`.
            - Share the QR code or `staticLink` with customers via SMS, email, or physical displays.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticQRResponse"
              examples:
                successResponse:
                  summary: üéâ Static Payment Link and QR ID Generated
                  description: This is what you'll receive when a static QR payment link is successfully created
                  value:
                    status: "OK"
                    userMessage: "Encrypted response payload"
                    responseDataType: "String"
                    responseData: "LcrLER3xZLRyDVxGdP8OYgpSYME+wkWIG4eOfbBexFTty4HO70VDNSKglaGuUMfNehxBE6fU5Ow6s3OPWbIkaaZ..."
                    errorCode: null
                    errorMessage: null
                    sysErrorMessage: null
                decryptedResponse:
                  summary: üìã Decrypted Response Example
                  description: This is the decrypted `responseData` containing the payment link and QR ID
                  value:
                    status: "OK"
                    userMessage: "QR-Code generated successfully"
                    responseDataType: "HashMap"
                    responseData:
                      staticLink: "https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0/staticQRRedirection/defaultstaticQRGatewayPage/6495373221"
                      brandName: "Ahmed"
                      qrId: "6495373221"
        "400":
          description: |
            ‚ùå **Request Error**

            There was an issue with your request. Common causes:
            - Invalid JSON format
            - Missing required fields (e.g., `req_user_id`, `me_code`)
            - Encryption key mismatch or invalid encryption
            - Invalid `me_id`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                errorExample:
                  summary: Example Error Response
                  value:
                    status: "error"
                    errorMessage: "Invalid encrypted payload - please check your encryption key"

components:
  schemas:
    EncryptedPayload:
      type: object
      required:
        - request
      properties:
        request:
          type: string
          description: The encrypted payment data (AES-256-CBC with PKCS7 padding)
          example: "CXAemespskAQCvLNox2fF3HiAXKEwk4BskvpTlYu5/5M1rdzFcY+LOMSMbHtWqAr..."
    PaymentLinkResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
          description: Status of the request
        link:
          type: string
          example: "https://uatcheckout.yagoutpay.com/ms-transaction-core-1-0/paymentRedirection/payment/wn0MMOXU"
          description: The generated payment link
    StaticQRResponse:
      type: object
      required:
        - status
        - userMessage
        - responseDataType
        - responseData
      properties:
        status:
          type: string
          example: "OK"
          description: Status of the request
        userMessage:
          type: string
          example: "Encrypted response payload"
          description: Message describing the response
        responseDataType:
          type: string
          example: "String"
          description: Type of data in the responseData field
        responseData:
          type: string
          example: "LcrLER3xZLRyDVxGdP8OYgpSYME+wkWIG4eOfbBexFTty4HO70VDNSKglaGuUMfNehxBE6fU5Ow6s3OPWbIkaaZ..."
          description: Encrypted JSON containing the payment link and QR ID
        errorCode:
          type: string
          nullable: true
          example: null
          description: Error code if applicable
        errorMessage:
          type: string
          nullable: true
          example: null
          description: Error message if applicable
        sysErrorMessage:
          type: string
          nullable: true
          example: null
          description: System error message if applicable
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
          description: Status of the request
        message:
          type: string
          example: "Invalid encrypted payload - please check your encryption key"
          description: Error message describing the issue
